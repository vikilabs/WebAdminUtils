#!/bin/bash

# migrate a website from one domain to another domain from backup
#
#		Author	: Viki (a) Vignesh Natarajan 
#		Contact	: vikilabs.org
#		Licence : MIT


function get_current_dir()
{
    CURRENT_DIR=`pwd -P`
}

#Get Website Source Path
function set_source_path()
{
    cd $CURRENT_DIR
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1; }
    cd ..
    SOURCE_PATH=`pwd -P`
}


function import_new_config()
{
    source $CURRENT_DIR/config.sh
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1;}
    
    NEW_DOMAIN=$DOMAIN
    
    NEW_DB1_NAME=$DB1_NAME
    NEW_DB1_USERNAME=$DB1_USERNAME
    NEW_DB1_PASSWORD=$DB1_PASSWORD
 
    if [[ -n $DB2_NAME ]]; then
    	NEW_DB2_NAME=$DB2_NAME
    	NEW_DB2_USERNAME=$DB2_USERNAME
    	NEW_DB2_PASSWORD=$DB2_PASSWORD
    fi

    NEW_DB_HOST=$DB_HOST
    NEW_DB_PORT=$DB_PORT
    NEW_WEBSITE_ROOT_DIR=$WEBSITE_ROOT_DIR
    NEW_MYSQL_ADMIN_USERNAME=$MYSQL_ADMIN_USERNAME
    NEW_MYSQL_ADMIN_PASSWORD=$MYSQL_ADMIN_PASSWORD
}

function empty_config_check_new()
{
    config_error=0

    echo

    [ -z $NEW_DOMAIN ] && { echo "  [ CONFIG ERROR ] :  NEW_DOMAIN" ; config_error=1; }
    [ -z $NEW_DB1_NAME ] && { echo "  [ CONFIG ERROR ] :  NEW_DB1_NAME" ; config_error=1; }
    [ -z $NEW_DB1_USERNAME ] && { echo "  [ CONFIG ERROR ] :  NEW_DB1_USERNAME" ; config_error=1; }
    [ -z $NEW_DB1_PASSWORD ] && { echo "  [ CONFIG ERROR ] :  NEW_DB1_PASSWORD" ; config_error=1; }
    [ -z $NEW_DB_HOST ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_HOST" ; config_error=1; }
    [ -z $NEW_DB_PORT ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_PORT" ; config_error=1;  }
    [ -z $NEW_WEBSITE_ROOT_DIR ] && { echo "  [ CONFIG ERROR ] :  NEW_WEBSITE_ROOT_DIR" ; config_error=1; }

    if [ $config_error -eq 1 ]; then
        echo
        echo "  [ ERROR ] Website Restore Failed, Invalid Configuration( $CURRENT_DIR/config.sh ) "
        echo
        exit 1
    fi
}

function remove_trailing_slash_new()
{
   NEW_WEBSITE_ROOT_DIR=`echo ${NEW_WEBSITE_ROOT_DIR%/}`
   NEW_WEBSITE_ROOT_DIR=`echo ${NEW_WEBSITE_ROOT_DIR%/}`
   
   NEW_DOMAIN=`echo ${NEW_DOMAIN%/}`
   NEW_DOMAIN=`echo ${NEW_DOMAIN%/}`
}

function db_empty_check()
{
    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        table_count=$(mysql -u$NEW_DB1_USERNAME -p$NEW_DB1_PASSWORD -h $NEW_DB_HOST -P $NEW_DB_PORT $NEW_DB1_NAME -e "SHOW TABLES;" | wc -l)
    else
        table_count=$(mysql -u$NEW_MYSQL_ADMIN_USERNAME -p$NEW_MYSQL_ADMIN_PASSWORD -h $NEW_DB_HOST -P $NEW_DB_PORT $NEW_DB1_NAME -e "SHOW TABLES;" | wc -l)
    fi
    
    if [ $table_count -gt 0 ];then
        echo "  [ ERROR ] [ ${LINENO} ] DB is not empty ( table_count : $table_count ), truncate database before migrating"
        echo
        echo "      -> $NEW_DB1_NAME"
        echo
        echo
        exit 1
    fi
}

function dir_empty_check()
{
    file_count=`ls ${NEW_WEBSITE_ROOT_DIR}/ | wc -l`
    if [ $file_count -gt 0 ];then
        echo "  [ ERROR ] [ ${LINENO} ] website root directory is not empty, clear all files before migrating"
        echo
        echo "      -> $NEW_WEBSITE_ROOT_DIR"
        echo
        echo
        exit 1
    fi
}

function check_whether_webroot_dir_inside_source_dir()
{
    # Example:
    #   
    #   if (/home/backup/website) inside ( /home/backup ) : TRUE 
    #   
    if [[ $NEW_WEBSITE_ROOT_DIR =~ "$SOURCE_PATH" ]]; then
        echo
        echo "  [ possible error ] It looks like new website root directory is inside source directory"
        echo
        echo "       -> [ SOURCE_DIR : $SOURCE_PATH ]"
        echo
        echo "       -> [ NEW_WEBSITE_ROOT_DIR : $NEW_WEBSITE_ROOT_DIR ]"
        echo
        echo
        exit 1
    fi  
} 

#Old Configuration
function import_old_config()
{
    source $CURRENT_DIR/.config_old.sh
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1; }

}

function empty_config_check_old()
{   
    config_error=0
    
    echo 
    [ -z $DOMAIN ] && { echo "  [ CONFIG ERROR ] :  DOMAIN" ; config_error=1; } 
    [ -z $DB1_NAME ] && { echo "  [ CONFIG ERROR ] :  DB1_NAME" ; config_error=1; }
    [ -z $DB1_USERNAME ] && { echo "  [ CONFIG ERROR ] :  DB1_USERNAME" ; config_error=1; }
    [ -z $DB1_PASSWORD ] && { echo "  [ CONFIG ERROR ] :  DB1_PASSWORD" ; config_error=1; }
    [ -z $DB_HOST ] && { echo "  [ CONFIG ERROR ] :  DB_HOST" ; config_error=1; }
    [ -z $DB_PORT ] && { echo "  [ CONFIG ERROR ] :  DB_PORT" ; config_error=1; } 
    [ -z $WEBSITE_ROOT_DIR ] && { echo "  [ CONFIG ERROR ] :  WEBSITE_ROOT_DIR" ; config_error=1; }
    [ -z $BACKUP_DIR ] && { echo "  [ CONFIG ERROR ] :  BACKUP_DIR" ; config_error=1; }
    [ -z $LOG_FILE ] && { echo "  [ CONFIG ERROR ] :  LOG_FILE" ; config_error=1; }
    
    if [ $config_error -eq 1 ]; then
        echo
        echo "  [ ERROR ] Website Restore Failed, Invalid Old Configuration( $CURRENT_DIR/.config_old.sh ) "
        echo 
        exit 1
   fi
}

function remove_trailing_slash_old()
{
   WEBSITE_ROOT_DIR=`echo ${WEBSITE_ROOT_DIR%/}`
   WEBSITE_ROOT_DIR=`echo ${WEBSITE_ROOT_DIR%/}`
   
   DOMAIN=`echo ${DOMAIN%/}`
   DOMAIN=`echo ${DOMAIN%/}`
}

function print_old_config()
{
    echo
    echo "  OLD CONFIGURATION"
    echo
    echo "  DOMAIN            : $DOMAIN"
    echo "  Website Root      : $WEBSITE_ROOT_DIR"
    echo "  DB NAME           : $DB1_NAME"
    echo "  DB USER           : $DB1_USERNAME"
    echo "  DB PASSWORD       : $DB1_PASSWORD"
    echo "  DB HOST           : $DB_HOST"
    echo "  DB PORT       	  : $DB_PORT"
    echo 
}

function print_new_config()
{
    echo 
    echo "  NEW CONFIGURATION"
    echo 
    echo "  DOMAIN            : $NEW_DOMAIN"
    echo "  Website Root      : $NEW_WEBSITE_ROOT_DIR"
    echo "  DB NAME           : $NEW_DB1_NAME"
    echo "  DB USER           : $NEW_DB1_USERNAME"
    echo "  DB PASSWORD       : $NEW_DB1_PASSWORD"
    echo "  DB HOST           : $NEW_DB_HOST"
    echo "  DB PORT           : $NEW_DB_PORT"
    echo 
}

function get_abs_path_new_website_root()
{
    cd $NEW_WEBSITE_ROOT_DIR
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1; }
    NEW_WEBSITE_ROOT_DIR=`pwd -P`
}

#update new configuration in code and database 
function update_new_config()
{
    cd $NEW_WEBSITE_ROOT_DIR
    [ "$DB1_NAME" != "$NEW_DB1_NAME" ] && { find . -type f -exec sed -i -e "s/$DB1_NAME/$NEW_DB1_NAME/g" {} \; ;}
    [ "$DB1_USERNAME" != "$NEW_DB1_USERNAME" ] && { find . -type f -exec sed -i -e "s/$DB1_USERNAME/$NEW_DB1_USERNAME/g" {} \; ;}
    [ "$DB1_PASSWORD" != "$NEW_DB1_PASSWORD" ] && { find . -type f -exec sed -i -e "s/$DB1_PASSWORD/$NEW_DB1_PASSWORD/g" {} \; ;}
    [ "$DB_HOST" != "$NEW_DB_HOST" ] && { find . -type f -exec sed -i -e "s/$DB_HOST/$NEW_DB_HOST/g" {} \; ;}
    [ "$DB_PORT" != "$NEW_DB_PORT" ] && { find . -type f -exec sed -i -e "s/$DB_PORT/$NEW_DB_PORT/g" {} \; ;}
    [ "$DOMAIN" != "$NEW_DOMAIN" ] && { find . -type f -exec sed -i -e "s/$DOMAIN/$NEW_DOMAIN/g" {} \; ;}
}

function delete_database()
{
    cd $SOURCE_PATH
    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        mysql -u$NEW_DB1_USERNAME  -p$NEW_DB1_PASSWORD -e "DROP DATABASE $NEW_DB1_NAME;" 2>/dev/null 1>/dev/null
    else
        mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD -e "DROP DATABASE $NEW_DB1_NAME;" 2>/dev/null 1>/dev/null
    fi

}


function create_database()
{
    cd $SOURCE_PATH
    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        mysql -u$NEW_DB1_USERNAME  -p$NEW_DB1_PASSWORD -e "CREATE DATABASE $NEW_DB1_NAME;" 2>/dev/null 1>/dev/null
    else
        mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD -e "CREATE DATABASE $NEW_DB1_NAME;" 2>/dev/null 1>/dev/null
    fi

    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Database Delete Failed"; exit 1; }
}

function create_db_user()
{
    cd $SOURCE_PATH

    CMD="CREATE USER \"$NEW_DB1_USERNAME\"@\"localhost\" IDENTIFIED BY \"$NEW_DB1_PASSWORD\";"

    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        mysql -u$NEW_DB1_USERNAME  -p$NEW_DB1_PASSWORD -e "$CMD" 2>/dev/null 1>/dev/null
    else
        mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD -e "$CMD" 2>/dev/null 1>/dev/null
    fi

    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Unable to create DB User ( $NEW_DB1_USERNAME )"; exit 1; }
}

function grant_permission2db_user()
{
    cd $SOURCE_PATH

    CMD="GRANT ALL PRIVILEGES ON ${NEW_DB1_NAME}.* TO \"$NEW_DB1_USERNAME\"@\"localhost\";"
    

    mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD -e "$CMD" 2>/dev/null 1>/dev/null

    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Unable to grant permission to DB User ( $NEW_DB1_USERNAME )"; exit 1; }
}


function delete_db_user()
{
    cd $SOURCE_PATH

    CMD="DROP USER \"$NEW_DB1_USERNAME\"@\"localhost\";"

    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        mysql -u$NEW_DB1_USERNAME  -p$NEW_DB1_PASSWORD -e "$CMD" 2>/dev/null 1>/dev/null 
    else
        mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD -e "$CMD" 2>/dev/null 1>/dev/null
    fi
}



function import_database()
{
    cd $SOURCE_PATH
    
    rm -rf /tmp/database1.sql 2>/dev/null 1>/dev/null
    rm -rf /tmp/database2.sql 2>/dev/null 1>/dev/null
    
    cp db/database1.sql /tmp/database1.sql 
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Database Copy Failed"; exit 1; }
    
    if [[ -n $NEW_DB2_NAME ]]; then
    	cp db/database2.sql /tmp/database2.sql 
    fi

    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Database Copy Failed"; exit 1; }

    [ "$DOMAIN" != "$NEW_DOMAIN" ] && { sed -i -e "s/$DOMAIN/$NEW_DOMAIN/g" /tmp/database1.sql;}    
    
    if [[ -n $NEW_DB2_NAME ]]; then
    	[ "$DOMAIN" != "$NEW_DOMAIN" ] && { sed -i -e "s/$DOMAIN/$NEW_DOMAIN/g" /tmp/database2.sql;}    
    fi

    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        mysql -u$NEW_DB1_USERNAME  -p$NEW_DB1_PASSWORD $NEW_DB1_NAME < /tmp/database1.sql
    else
        mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD $NEW_DB1_NAME < /tmp/database1.sql
    fi

    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Database1 Import Failed"; exit 1; }
    
    if [[ -n $NEW_DB2_NAME ]]; then
    	if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        	mysql -u$NEW_DB2_USERNAME  -p$NEW_DB2_PASSWORD $NEW_DB2_NAME < /tmp/database2.sql
    	else
        	mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD $NEW_DB2_NAME < /tmp/database2.sql
    	fi

    	[ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Database2 Import Failed"; exit 1; }
    fi 
}

function import_code()
{
    cd $SOURCE_PATH
    
    cp -arf code/. ${NEW_WEBSITE_ROOT_DIR}/
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Website copy failed"; exit 1; }
}

function migration_success()
{
    echo
    echo "  [ SUCCESS ] website migrated successfully ( $NEW_DOMAIN )"
    echo
}


function main()
{
    get_current_dir
    set_source_path
    import_new_config
    import_old_config
    
    empty_config_check_new
    empty_config_check_old
    remove_trailing_slash_new
    remove_trailing_slash_old
    dir_empty_check
    
    
    #db_empty_check
    delete_database
    create_database
    delete_db_user
    create_db_user
    grant_permission2db_user
    #dir_empty_check
    check_whether_webroot_dir_inside_source_dir
    print_old_config
    print_new_config
    get_abs_path_new_website_root
    import_database
    import_code
    update_new_config
    migration_success
}

# Call Main Function
main
