#!/bin/bash

# migrate a website from one domain to another domain from backup
#
#		Author	: Viki (a) Vignesh Natarajan 
#		Contact	: vikilabs.org
#		Licence : MIT


function get_current_dir()
{
    CURRENT_DIR=`pwd -P`
}

#Get Website Source Path
function set_source_path()
{
    cd $CURRENT_DIR
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1; }
    cd ..
    SOURCE_PATH=`pwd -P`
}


function import_new_config()
{
    source $CURRENT_DIR/config.sh
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1;}
    
    NEW_DOMAIN=$DOMAIN
    NEW_DB_NAME=$DB_NAME
    NEW_DB_USERNAME=$DB_USERNAME
    NEW_DB_PASSWORD=$DB_PASSWORD
    NEW_DB_HOST=$DB_HOST
    NEW_DB_PORT=$DB_PORT
    NEW_WEBSITE_ROOT_DIR=$WEBSITE_ROOT_DIR
    NEW_MYSQL_ADMIN_USERNAME=$MYSQL_ADMIN_USERNAME
    NEW_MYSQL_ADMIN_PASSWORD=$MYSQL_ADMIN_PASSWORD
}

function empty_config_check_new()
{
    config_error=0

    echo

    [ -z $NEW_DOMAIN ] && { echo "  [ CONFIG ERROR ] :  NEW_DOMAIN" ; config_error=1; }
    [ -z $NEW_DB_NAME ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_NAME" ; config_error=1; }
    [ -z $NEW_DB_USERNAME ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_USERNAME" ; config_error=1; }
    [ -z $NEW_DB_PASSWORD ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_PASSWORD" ; config_error=1; }
    [ -z $NEW_DB_HOST ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_HOST" ; config_error=1; }
    [ -z $NEW_DB_PORT ] && { echo "  [ CONFIG ERROR ] :  NEW_DB_PORT" ; config_error=1;  }
    [ -z $NEW_WEBSITE_ROOT_DIR ] && { echo "  [ CONFIG ERROR ] :  NEW_WEBSITE_ROOT_DIR" ; config_error=1; }

    if [ $config_error -eq 1 ]; then
        echo
        echo "  [ ERROR ] Website Restore Failed, Invalid Configuration( $CURRENT_DIR/config.sh ) "
        echo
        exit 1
    fi
}

function remove_trailing_slash_new()
{
   NEW_WEBSITE_ROOT_DIR=`echo ${NEW_WEBSITE_ROOT_DIR%/}`
   NEW_WEBSITE_ROOT_DIR=`echo ${NEW_WEBSITE_ROOT_DIR%/}`
   
   NEW_DOMAIN=`echo ${NEW_DOMAIN%/}`
   NEW_DOMAIN=`echo ${NEW_DOMAIN%/}`
}

function db_empty_check()
{
    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        table_count=$(mysql -u$NEW_DB_USERNAME -p$NEW_DB_PASSWORD -h $NEW_DB_HOST -P $NEW_DB_PORT $NEW_DB_NAME -e "SHOW TABLES;" | wc -l)
    else
        table_count=$(mysql -u$NEW_MYSQL_ADMIN_USERNAME -p$NEW_MYSQL_ADMIN_PASSWORD -h $NEW_DB_HOST -P $NEW_DB_PORT $NEW_DB_NAME -e "SHOW TABLES;" | wc -l)
    fi
    
    if [ $table_count -gt 0 ];then
        echo "  [ ERROR ] [ ${LINENO} ] DB is not empty ( table_count : $table_count ), truncate database before migrating"
        echo
        echo "      -> $NEW_DB_NAME"
        echo
        echo
        exit 1
    fi
}

function dir_empty_check()
{
    file_count=`ls ${NEW_WEBSITE_ROOT_DIR}/ | wc -l`
    if [ $file_count -gt 0 ];then
        echo "  [ ERROR ] [ ${LINENO} ] website root directory is not empty, clear all files before migrating"
        echo
        echo "      -> $NEW_WEBSITE_ROOT_DIR"
        echo
        echo
        exit 1
    fi
}

function check_whether_webroot_dir_inside_source_dir()
{
    # Example:
    #   
    #   if (/home/backup/website) inside ( /home/backup ) : TRUE 
    #   
    if [[ $NEW_WEBSITE_ROOT_DIR =~ "$SOURCE_PATH" ]]; then
        echo
        echo "  [ possible error ] It looks like new website root directory is inside source directory"
        echo
        echo "       -> [ SOURCE_DIR : $SOURCE_PATH ]"
        echo
        echo "       -> [ NEW_WEBSITE_ROOT_DIR : $NEW_WEBSITE_ROOT_DIR ]"
        echo
        echo
        exit 1
    fi  
} 

#Old Configuration
function import_old_config()
{
    source $CURRENT_DIR/.config_old.sh
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1; }

}

function empty_config_check_old()
{   
    config_error=0
    
    echo 
    [ -z $DOMAIN ] && { echo "  [ CONFIG ERROR ] :  DOMAIN" ; config_error=1; } 
    [ -z $DB_NAME ] && { echo "  [ CONFIG ERROR ] :  DB_NAME" ; config_error=1; }
    [ -z $DB_USERNAME ] && { echo "  [ CONFIG ERROR ] :  DB_USERNAME" ; config_error=1; }
    [ -z $DB_PASSWORD ] && { echo "  [ CONFIG ERROR ] :  DB_PASSWORD" ; config_error=1; }
    [ -z $DB_HOST ] && { echo "  [ CONFIG ERROR ] :  DB_HOST" ; config_error=1; }
    [ -z $DB_PORT ] && { echo "  [ CONFIG ERROR ] :  DB_PORT" ; config_error=1; } 
    [ -z $WEBSITE_ROOT_DIR ] && { echo "  [ CONFIG ERROR ] :  WEBSITE_ROOT_DIR" ; config_error=1; }
    [ -z $BACKUP_DIR ] && { echo "  [ CONFIG ERROR ] :  BACKUP_DIR" ; config_error=1; }
    [ -z $LOG_FILE ] && { echo "  [ CONFIG ERROR ] :  LOG_FILE" ; config_error=1; }
    
    if [ $config_error -eq 1 ]; then
        echo
        echo "  [ ERROR ] Website Restore Failed, Invalid Old Configuration( $CURRENT_DIR/.config_old.sh ) "
        echo 
        exit 1
   fi
}

function remove_trailing_slash_old()
{
   WEBSITE_ROOT_DIR=`echo ${WEBSITE_ROOT_DIR%/}`
   WEBSITE_ROOT_DIR=`echo ${WEBSITE_ROOT_DIR%/}`
   
   DOMAIN=`echo ${DOMAIN%/}`
   DOMAIN=`echo ${DOMAIN%/}`
}

function print_old_config()
{
    echo
    echo "  OLD CONFIGURATION"
    echo
    echo "  DOMAIN            : $DOMAIN"
    echo "  Website Root      : $WEBSITE_ROOT_DIR"
    echo "  DB NAME           : $DB_NAME"
    echo "  DB USER           : $DB_USERNAME"
    echo "  DB PASSWORD       : $DB_PASSWORD"
    echo "  DB HOST           : $DB_HOST"
    echo "  DB PORT       	  : $DB_PORT"
    echo 
}

function print_new_config()
{
    echo 
    echo "  NEW CONFIGURATION"
    echo 
    echo "  DOMAIN            : $NEW_DOMAIN"
    echo "  Website Root      : $NEW_WEBSITE_ROOT_DIR"
    echo "  DB NAME           : $NEW_DB_NAME"
    echo "  DB USER           : $NEW_DB_USERNAME"
    echo "  DB PASSWORD       : $NEW_DB_PASSWORD"
    echo "  DB HOST           : $NEW_DB_HOST"
    echo "  DB PORT           : $NEW_DB_PORT"
    echo 
}

function get_abs_path_new_website_root()
{
    cd $NEW_WEBSITE_ROOT_DIR
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ]"; exit 1; }
    NEW_WEBSITE_ROOT_DIR=`pwd -P`
}

#update new configuration in code and database 
function update_new_config()
{
    cd $SOURCE_PATH
    find . -type f -exec sed -i -e "s/$DB_NAME/$NEW_DB_NAME/g" {} \;
    find . -type f -exec sed -i -e "s/$DB_USERNAME/$NEW_DB_USERNAME/g" {} \;
    find . -type f -exec sed -i -e "s/$DB_PASSWORD/$NEW_DB_PASSWORD/g" {} \;
    find . -type f -exec sed -i -e "s/$DB_HOST/$NEW_DB_HOST/g" {} \;
    find . -type f -exec sed -i -e "s/$DB_PORT/$NEW_DB_PORT/g" {} \;
    find . -type f -exec sed -i -e "s/$DOMAIN/$NEW_DOMAIN/g" {} \;
}

function importe_database()
{
    cd $SOURCE_PATH
    if [[ -z $NEW_MYSQL_ADMIN_USERNAME ]]; then
        mysql -u$NEW_DB_USERNAME  -p$NEW_DB_PASSWORD $NEW_DB_NAME < db/database.sql
    else
        mysql -u$NEW_MYSQL_ADMIN_USERNAME  -p$NEW_MYSQL_ADMIN_PASSWORD $NEW_DB_NAME < db/database.sql
    fi

    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Database Import Failed"; exit 1; }
}

function importe_code()
{
    cd $SOURCE_PATH
    mv code/* ${NEW_WEBSITE_ROOT_DIR}/
    [ $? -ne 0 ] && { echo "  [ ERROR ] [ ${LINENO} ] Website copy failed"; exit 1; }
}

function migration_success()
{
    echo
    echo "  [ SUCCESS ] website migrated successfully ( $NEW_DOMAIN )"
    echo
}


function main()
{
    get_current_dir
    set_source_path
    import_new_config
    import_old_config
    empty_config_check_new
    empty_config_check_old
    remove_trailing_slash_new
    remove_trailing_slash_old
    db_empty_check
    dir_empty_check
    check_whether_webroot_dir_inside_source_dir
    print_old_config
    print_new_config
    get_abs_path_new_website_root
    update_new_config
    importe_database
    importe_code
    migration_success
}

# Call Main Function
main
